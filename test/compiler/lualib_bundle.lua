-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua
function ___TS__ArrayForEach(arr,callbackFn,thisArg)
    local i = 0
    while(i<#arr) do
        do
            callbackFn(arr[i+1],i,arr)
        end
        ::__continue0::
        i=i+1
    end
end

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua
function ___TS__ArrayMap(arr,callbackfn,thisArg)
    local newArray = {}

    local i = 0
    while(i<#arr) do
        do
            newArray[i+1] = callbackfn(arr[i+1],i,arr)
        end
        ::__continue0::
        i=i+1
    end
    return newArray
end

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua
function ___TS__ArrayPush(arr,...)
    local items = { ... }
    for _, item in ipairs(items) do
        do
            arr[#arr+1] = item
        end
        ::__continue0::
    end
end

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua
function ___TS__InstanceOf(obj,classTbl)
    while obj~=nil do
        do
            if obj.__index==classTbl then
                return true
            end
            obj = obj.__base
        end
        ::__continue0::
    end
    return false
end

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua
Map = Map or {}
Map.__index = Map
function Map.new(construct, ...)
    local instance = setmetatable({}, Map)
    if construct and Map.constructor then Map.constructor(instance, ...) end
    return instance
end
function Map.constructor(self)
end
function Map.Map(self,other)
    self.items = {}
    self.size = 0
    if other then
        self.size = other.size
        other:forEach(function(value,key)
            self.items[key] = value
        end
)
    end
end
function Map.clear(self)
    self.items = {}
    self.size = 0
end
function Map.delete(self,key)
    local contains = self:has(key)

    self.items[key] = nil
    self.size = (self.size-1)
    return contains
end
function Map.entries(self)
    local out = {}

    for key, _ in pairs(self.items) do
        do
            out[#out+1+1] = {key,self.items[key]}
        end
        ::__continue0::
    end
    return out
end
function Map.forEach(self,callback)
    for key, _ in pairs(self.items) do
        do
            callback(self.items[key],key,self)
        end
        ::__continue1::
    end
end
function Map.get(self,key)
    return self.items[key]
end
function Map.has(self,key)
    return self.items[key]~=nil
end
function Map.keys(self)
    local out = {}

    for key, _ in pairs(self.items) do
        do
            out[#out+1+1] = key
        end
        ::__continue2::
    end
    return out
end
function Map.set(self,key,value)
    if (not self:has(key)) then
        self.size = (self.size+1)
    end
    self.items[key] = value
    return self
end
function Map.values(self)
    local out = {}

    for key, _ in pairs(self.items) do
        do
            out[#out+1+1] = self.items[key]
        end
        ::__continue3::
    end
    return out
end

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua

-- Generated by TypescriptToLua v0.6.0
-- https://github.com/Perryvw/TypescriptToLua
function ___TS__Ternary(condition,cb1,cb2)
    if condition then
        cb1()
    else
        cb2()
    end
end

